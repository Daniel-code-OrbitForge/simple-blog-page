[
    {
        "id": 1,
        "title": "First Blog post | Getting started with JSON/ Express",
        "author": "Harrison Daniel",
        "date": "26-09-2025",
        "content": "Express makes building web-applications very simple and fun..."
    },
    {
        "id": 2,
        "title": "Understanding EJS Templates",
        "author":"Harrison Daniel",
        "date":"25-09-2025",
        "content": "EJS lets you embed Javascript into HTML for dynamic rendering..."
        
    },

    {
        "id": 3,
        "title": "Setting up Middleware in Express",
        "author": "Odidika Somto Anthony",
        "date":"27-09-2025",
        "content": "Middleware functions are functions that have access to the request object..."
    }

  {
    "id": 4,
    "title": "First Blog post | Getting started with JSON/ Express",
    "author": "Harrison Daniel",
    "date": "26-09-2025",
    "content": "JSON (JavaScript Object Notation) is a lightweight format for storing and exchanging data. In Express, you can use it to send and receive data between client and server. First, install Express with npm install express. Then, set up a server and use app.use(express.json()) to parse JSON requests. You can create routes like app.post(\"/data\", (req, res) => { res.json(req.body); }); to handle incoming JSON. This makes Express ideal for building APIs that interact with frontend applications or external services."
  },
  {
    "id": 5,
    "title": "Understanding EJS Templates",
    "author": "Olukayode Feyisike Pelumi",
    "date": "25-09-2025",
    "content": "EJS (Embedded JavaScript) is a templating engine for Node.js that lets you generate dynamic HTML with JavaScript. Instead of writing static HTML, you can embed JS code inside <% %> tags. For example, <%= user.name %> displays a variable’s value, while <% if(condition) { %> ... <% } %> allows logic. To use EJS with Express, install it using npm install ejs and set the view engine: app.set(\"view engine\", \"ejs\"). Then create .ejs files in the views/ folder. This makes it easy to render pages dynamically with data from your server."
  },
  {
    "id": 6,
    "title": "Routing in Express",
    "author": "Francis Egbuleze",
    "date": "25-09-2025",
    "content": "In Express, routing defines how your application responds to client requests at specific endpoints (URLs). Each route has a path and an HTTP method like GET, POST, PUT, or DELETE. You can also organize routes using express.Router() for modular code. Routing makes it easy to handle different requests and build RESTful APIs by mapping URLs to specific logic in your app."
  },
  {
    "id": 7,
    "title": "Middleware in Express",
    "author": "Frederick Baafi",
    "date": "25-09-2025",
    "content": "Middleware in Express are functions that run between receiving a request and sending a response. They can modify requests, responses, or execute extra logic. A middleware has access to req, res, and next. Express has built-in middleware like express.json() to parse JSON, and you can also create custom middleware for authentication, logging, or error handling. Middleware makes applications flexible, modular, and easier to maintain."
  },
  {
    "id": 8,
    "title": "Serving Static Files",
    "author": "ONIGBINDE Joshua Oluwafenwa",
    "date": "25-09-2025",
    "content": "Serving static files in Express means delivering files like images, stylesheets, JavaScript scripts, fonts, or even simple HTML pages directly to the browser. These files are called static because they don’t change dynamically on the server; they remain the same for every user. Express has built-in support for this, so you can place all your static resources in a folder (often called public) and make them accessible to users. This is commonly used for website styling, logos, profile pictures, or frontend scripts. It helps combine backend logic with a fully styled, functional frontend."
  },
  {
    "id": 9,
    "title": "Node.js Basics",
    "author": "Agu Michael uche",
    "date": "25-09-2025",
    "content": "Node.js is an open-source, cross-platform runtime environment that allows JavaScript to run outside the web browser. Traditionally, JavaScript was used only in the frontend, but with Node.js, developers can now use it for backend development, creating fullstack applications using a single language. It was built on Google Chrome’s V8 JavaScript engine, which compiles JavaScript into fast machine code, making Node.js very efficient."
  },
  {
    "id": 10,
    "title": "What is REST API?",
    "author": "Omijori muiz Ayomide ",
    "date": "25-09-2025",
    "content": "A REST API (Representational State Transfer) is a way for applications to communicate over the web using standard rules. It allows clients like browsers or mobile apps to request and send data, usually in JSON format. REST APIs use HTTP methods like GET, POST, PUT, and DELETE to perform actions. They are stateless, scalable, and work across platforms, powering most modern web and mobile apps."
},
  {
    "id": 11,
    "title": "MongoDB for Beginners",
    "author": "MUNGATHIA NANCY KARIMI",
    "date": "25-09-2025",
    "content": "MongoDB is a NoSQL database that stores data in flexible, JSON-like documents instead of tables. This makes it easy to handle varying data structures. Collections group related documents, and each document holds key-value pairs. MongoDB is ideal for applications that require fast read/write operations, scalability, and flexibility, such as social media apps, e-commerce platforms, or real-time analytics."
  },
  {
    "id": 12,
    "title": "Async/Await in JavaScript",
    "author": "Odidika Somto Anthony ",
    "date": "25-09-2025",
    "content": "Async/Await makes asynchronous code look synchronous."
  },
  {
    "id": 13,
    "title": "Promises in JavaScript",
    "author": "ELIMUYAH ODINEKACHUKWU",
    "date": "25-09-2025",
    "content": "In JavaScript, a Promise is simply a way to deal with tasks that take time, like fetching data from an API or reading a file. Instead of blocking your code while waiting, a Promise says: I’ll get back to you with the result.A Promise can be in three states: pending (still waiting), fulfilled (success), or rejected (error). You use .then() to handle success and .catch() for errors.The beauty of Promises is that they make asynchronous code cleaner, easier to read, and they work perfectly with async/await."
  }
]